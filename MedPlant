{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"papermill":{"default_parameters":{},"duration":12376.115345,"end_time":"2023-10-15T09:16:52.601783","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2023-10-15T05:50:36.486438","version":"2.4.0"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6417582,"sourceType":"datasetVersion","datasetId":3701557}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Medicinal Plant Detection Using Deep Learning","metadata":{}},{"cell_type":"markdown","source":"Identification of medicinal plants using the trained Deep Learning","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom PIL import Image, ImageFile\nfrom tensorflow.keras import layers, Sequential, preprocessing, applications\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.layers import Resizing, Rescaling\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory,image\nfrom tensorflow.keras.preprocessing.image import img_to_array, load_img\nImageFile.LOAD_TRUNCATED_IMAGES = True","metadata":{"papermill":{"duration":8.182389,"end_time":"2023-10-15T05:50:47.603891","exception":false,"start_time":"2023-10-15T05:50:39.421502","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:19.337590Z","iopub.execute_input":"2024-08-21T14:01:19.337971Z","iopub.status.idle":"2024-08-21T14:01:25.190941Z","shell.execute_reply.started":"2024-08-21T14:01:19.337939Z","shell.execute_reply":"2024-08-21T14:01:25.190093Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-08-21 14:01:19.846528: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-08-21 14:01:19.846591: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-08-21 14:01:19.848050: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Convert Images in directory into Dataset\nwe can use `tf.keras.preprocessing.image_dataset_from_directory` to convert the data into dataset so we can train the models out of the box","metadata":{"papermill":{"duration":0.003275,"end_time":"2023-10-15T05:50:47.610877","exception":false,"start_time":"2023-10-15T05:50:47.607602","status":"completed"},"tags":[]}},{"cell_type":"code","source":"dataset = image_dataset_from_directory(\n    \"/kaggle/input/indian-medicinal-leaves-dataset/Indian Medicinal Leaves Image Datasets/Medicinal Leaf dataset\",\n    shuffle=True,\n    batch_size=32,\n    image_size=(299, 299),\n)\n\nlabels = dataset.class_names\nlabels","metadata":{"papermill":{"duration":5.754563,"end_time":"2023-10-15T05:50:53.368670","exception":false,"start_time":"2023-10-15T05:50:47.614107","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:25.192912Z","iopub.execute_input":"2024-08-21T14:01:25.193668Z","iopub.status.idle":"2024-08-21T14:01:27.746505Z","shell.execute_reply.started":"2024-08-21T14:01:25.193634Z","shell.execute_reply":"2024-08-21T14:01:27.745516Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Found 6900 files belonging to 80 classes.\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"['Aloevera',\n 'Amla',\n 'Amruthaballi',\n 'Arali',\n 'Astma_weed',\n 'Badipala',\n 'Balloon_Vine',\n 'Bamboo',\n 'Beans',\n 'Betel',\n 'Bhrami',\n 'Bringaraja',\n 'Caricature',\n 'Castor',\n 'Catharanthus',\n 'Chakte',\n 'Chilly',\n 'Citron lime (herelikai)',\n 'Coffee',\n 'Common rue(naagdalli)',\n 'Coriender',\n 'Curry',\n 'Doddpathre',\n 'Drumstick',\n 'Ekka',\n 'Eucalyptus',\n 'Ganigale',\n 'Ganike',\n 'Gasagase',\n 'Ginger',\n 'Globe Amarnath',\n 'Guava',\n 'Henna',\n 'Hibiscus',\n 'Honge',\n 'Insulin',\n 'Jackfruit',\n 'Jasmine',\n 'Kambajala',\n 'Kasambruga',\n 'Kohlrabi',\n 'Lantana',\n 'Lemon',\n 'Lemongrass',\n 'Malabar_Nut',\n 'Malabar_Spinach',\n 'Mango',\n 'Marigold',\n 'Mint',\n 'Neem',\n 'Nelavembu',\n 'Nerale',\n 'Nooni',\n 'Onion',\n 'Padri',\n 'Palak(Spinach)',\n 'Papaya',\n 'Parijatha',\n 'Pea',\n 'Pepper',\n 'Pomoegranate',\n 'Pumpkin',\n 'Raddish',\n 'Rose',\n 'Sampige',\n 'Sapota',\n 'Seethaashoka',\n 'Seethapala',\n 'Spinach1',\n 'Tamarind',\n 'Taro',\n 'Tecoma',\n 'Thumbe',\n 'Tomato',\n 'Tulsi',\n 'Turmeric',\n 'ashoka',\n 'camphor',\n 'kamakasturi',\n 'kepala']"},"metadata":{}}]},{"cell_type":"code","source":"for image_batch, labels_batch in dataset.take(1):\n    print(image_batch.shape)\n    print(labels_batch.numpy())\n","metadata":{"papermill":{"duration":10.257006,"end_time":"2023-10-15T05:51:03.629412","exception":false,"start_time":"2023-10-15T05:50:53.372406","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:27.747548Z","iopub.execute_input":"2024-08-21T14:01:27.747813Z","iopub.status.idle":"2024-08-21T14:01:28.382770Z","shell.execute_reply.started":"2024-08-21T14:01:27.747791Z","shell.execute_reply":"2024-08-21T14:01:28.381771Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"(32, 299, 299, 3)\n[78  3 33 61 14 47 22 35 62 79 74 77 79 63 13 36 51 53 71 70 26 34 30 21\n 20  0 75 34 36 29  7 14]\n","output_type":"stream"}]},{"cell_type":"code","source":"len(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T14:01:28.385622Z","iopub.execute_input":"2024-08-21T14:01:28.386097Z","iopub.status.idle":"2024-08-21T14:01:28.392695Z","shell.execute_reply.started":"2024-08-21T14:01:28.386057Z","shell.execute_reply":"2024-08-21T14:01:28.391837Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"216"},"metadata":{}}]},{"cell_type":"code","source":"train_size = int(0.75 * len(dataset))\nval_size = int(0.15 * len(dataset))\ntest_size = int(0.10 * len(dataset))\ntrain_size, val_size, test_size","metadata":{"papermill":{"duration":0.013317,"end_time":"2023-10-15T05:51:03.646632","exception":false,"start_time":"2023-10-15T05:51:03.633315","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:28.393804Z","iopub.execute_input":"2024-08-21T14:01:28.394959Z","iopub.status.idle":"2024-08-21T14:01:28.402010Z","shell.execute_reply.started":"2024-08-21T14:01:28.394917Z","shell.execute_reply":"2024-08-21T14:01:28.401180Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(162, 32, 21)"},"metadata":{}}]},{"cell_type":"markdown","source":"## Train, Test, Validate\npartition the data into train test and validation datasets","metadata":{"papermill":{"duration":0.0034,"end_time":"2023-10-15T05:51:03.654073","exception":false,"start_time":"2023-10-15T05:51:03.650673","status":"completed"},"tags":[]}},{"cell_type":"code","source":"def get_dataset_partisions_tf(ds, train_split=0.75, val_split=0.15, test_split=0.1, shuffle=True, shuffle_size=10000):\n    if shuffle:\n        ds = ds.shuffle(shuffle_size, seed=12)\n    dataset_size = len(ds)\n    train_size = int(train_split * dataset_size)\n    val_size = int(val_split * dataset_size)\n    test_size = int(test_split * dataset_size)\n    train_ds = ds.take(train_size)\n    remaining_ds = ds.skip(train_size)\n    val_ds = remaining_ds.take(val_size)\n    test_ds = remaining_ds.skip(val_size)\n\n    return train_ds, val_ds, test_ds\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T14:01:28.403089Z","iopub.execute_input":"2024-08-21T14:01:28.403390Z","iopub.status.idle":"2024-08-21T14:01:28.413693Z","shell.execute_reply.started":"2024-08-21T14:01:28.403365Z","shell.execute_reply":"2024-08-21T14:01:28.412918Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def get_dataset_partisions_tf(ds, train_split=0.8, test_split=0.2, shuffle=True, shuffle_size=10000):\n    if shuffle:\n        ds = ds.shuffle(shuffle_size, seed=12)\n    train_size = int(train_split * len(ds))\n    test_size = int(test_split * len(ds))\n    train_ds = ds.take(train_size)\n    test_ds = ds.skip(train_size)\n    val_ds = test_ds.skip(test_size)\n    test_ds = test_ds.take(test_size)\n    return train_ds, test_ds, val_ds","metadata":{"papermill":{"duration":0.011695,"end_time":"2023-10-15T05:51:03.669555","exception":false,"start_time":"2023-10-15T05:51:03.657860","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:28.414778Z","iopub.execute_input":"2024-08-21T14:01:28.415108Z","iopub.status.idle":"2024-08-21T14:01:28.424517Z","shell.execute_reply.started":"2024-08-21T14:01:28.415083Z","shell.execute_reply":"2024-08-21T14:01:28.423491Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"train_ds, val_ds, test_ds = get_dataset_partisions_tf(dataset)\nlen(train_ds), len(val_ds), len(test_ds)","metadata":{"papermill":{"duration":0.018826,"end_time":"2023-10-15T05:51:03.691907","exception":false,"start_time":"2023-10-15T05:51:03.673081","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:28.425810Z","iopub.execute_input":"2024-08-21T14:01:28.426112Z","iopub.status.idle":"2024-08-21T14:01:28.445926Z","shell.execute_reply.started":"2024-08-21T14:01:28.426087Z","shell.execute_reply":"2024-08-21T14:01:28.445044Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(172, 43, 1)"},"metadata":{}}]},{"cell_type":"markdown","source":"## Resize and Normalize\n- Xception models takes the image input as 299x299 pixels so converting into the trainable format is necessary\n- The Images are to be normalized before to train accurately and efficiently","metadata":{"papermill":{"duration":0.007512,"end_time":"2023-10-15T05:51:03.707834","exception":false,"start_time":"2023-10-15T05:51:03.700322","status":"completed"},"tags":[]}},{"cell_type":"code","source":"resize_and_rescale = Sequential([\n    Resizing(299, 299),\n    Rescaling(1./255)\n])","metadata":{"papermill":{"duration":0.022736,"end_time":"2023-10-15T05:51:03.734966","exception":false,"start_time":"2023-10-15T05:51:03.712230","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:28.446862Z","iopub.execute_input":"2024-08-21T14:01:28.447101Z","iopub.status.idle":"2024-08-21T14:01:28.454225Z","shell.execute_reply.started":"2024-08-21T14:01:28.447078Z","shell.execute_reply":"2024-08-21T14:01:28.453253Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"### Download the Xception model predefined weights from tensorflow into your working environment","metadata":{"papermill":{"duration":0.003609,"end_time":"2023-10-15T05:51:03.742315","exception":false,"start_time":"2023-10-15T05:51:03.738706","status":"completed"},"tags":[]}},{"cell_type":"code","source":"base_model = Xception(\n    weights='imagenet',\n    input_shape=(299, 299, 3),\n    include_top=False,\n    pooling='avg',\n    classifier_activation='softmax',\n    classes=len(labels)\n)","metadata":{"papermill":{"duration":1.901883,"end_time":"2023-10-15T05:51:05.647794","exception":false,"start_time":"2023-10-15T05:51:03.745911","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:28.457512Z","iopub.execute_input":"2024-08-21T14:01:28.457822Z","iopub.status.idle":"2024-08-21T14:01:29.816594Z","shell.execute_reply.started":"2024-08-21T14:01:28.457786Z","shell.execute_reply":"2024-08-21T14:01:29.815706Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"base_model.trainable = False\n\ninputs = tf.keras.Input(shape=(299, 299, 3))\nx = resize_and_rescale(inputs)\nx = base_model(x, training=False)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.2)(x)\noutputs = tf.keras.layers.Dense(len(labels), activation='softmax')(x)\nmodel = tf.keras.Model(inputs, outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nmodel.summary()\n\nhistory = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    batch_size=32,\n    epochs=30\n)","metadata":{"papermill":{"duration":12074.847144,"end_time":"2023-10-15T09:12:20.499349","exception":false,"start_time":"2023-10-15T05:51:05.652205","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T14:01:29.817922Z","iopub.execute_input":"2024-08-21T14:01:29.818282Z","iopub.status.idle":"2024-08-21T15:25:03.533908Z","shell.execute_reply.started":"2024-08-21T14:01:29.818251Z","shell.execute_reply":"2024-08-21T15:25:03.533052Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_1 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m299\u001b[0m, \u001b[38;5;34m299\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential (\u001b[38;5;33mSequential\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m299\u001b[0m, \u001b[38;5;34m299\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ xception (\u001b[38;5;33mFunctional\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │    \u001b[38;5;34m20,861,480\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m262,272\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m80\u001b[0m)             │        \u001b[38;5;34m10,320\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">299</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">299</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">299</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">299</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ xception (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">20,861,480</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">262,272</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">80</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">10,320</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m21,134,072\u001b[0m (80.62 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">21,134,072</span> (80.62 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m272,592\u001b[0m (1.04 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,592</span> (1.04 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m20,861,480\u001b[0m (79.58 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">20,861,480</span> (79.58 MB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Epoch 1/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m  1/172\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m4:35:16\u001b[0m 97s/step - accuracy: 0.0000e+00 - loss: 4.3720","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1724248986.354770     608 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1724248986.396174     608 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 206ms/step - accuracy: 0.1418 - loss: 3.8465","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\nW0000 00:00:1724249094.603968     610 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m209s\u001b[0m 660ms/step - accuracy: 0.1424 - loss: 3.8435 - val_accuracy: 0.5545 - val_loss: 2.0892\nEpoch 2/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.4987 - loss: 2.0610","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 549ms/step - accuracy: 0.4989 - loss: 2.0601 - val_accuracy: 0.7275 - val_loss: 1.3084\nEpoch 3/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.6387 - loss: 1.4449","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m164s\u001b[0m 554ms/step - accuracy: 0.6387 - loss: 1.4444 - val_accuracy: 0.8147 - val_loss: 0.8880\nEpoch 4/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 115ms/step - accuracy: 0.7161 - loss: 1.0969","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 561ms/step - accuracy: 0.7162 - loss: 1.0968 - val_accuracy: 0.8583 - val_loss: 0.6935\nEpoch 5/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.7770 - loss: 0.8663","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 553ms/step - accuracy: 0.7770 - loss: 0.8663 - val_accuracy: 0.8946 - val_loss: 0.5101\nEpoch 6/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.8077 - loss: 0.7307","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m167s\u001b[0m 566ms/step - accuracy: 0.8077 - loss: 0.7306 - val_accuracy: 0.9047 - val_loss: 0.4462\nEpoch 7/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.8350 - loss: 0.6438","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 554ms/step - accuracy: 0.8350 - loss: 0.6438 - val_accuracy: 0.9477 - val_loss: 0.3253\nEpoch 8/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.8734 - loss: 0.5160","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 554ms/step - accuracy: 0.8734 - loss: 0.5161 - val_accuracy: 0.9462 - val_loss: 0.2816\nEpoch 9/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.8902 - loss: 0.4359","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 547ms/step - accuracy: 0.8902 - loss: 0.4360 - val_accuracy: 0.9629 - val_loss: 0.2310\nEpoch 10/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9020 - loss: 0.3975","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m164s\u001b[0m 551ms/step - accuracy: 0.9019 - loss: 0.3975 - val_accuracy: 0.9622 - val_loss: 0.2033\nEpoch 11/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9169 - loss: 0.3376","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 555ms/step - accuracy: 0.9168 - loss: 0.3376 - val_accuracy: 0.9709 - val_loss: 0.1749\nEpoch 12/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9170 - loss: 0.3210","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 551ms/step - accuracy: 0.9170 - loss: 0.3210 - val_accuracy: 0.9846 - val_loss: 0.1281\nEpoch 13/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 115ms/step - accuracy: 0.9367 - loss: 0.2721","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m164s\u001b[0m 547ms/step - accuracy: 0.9367 - loss: 0.2722 - val_accuracy: 0.9905 - val_loss: 0.1139\nEpoch 14/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9398 - loss: 0.2444","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 561ms/step - accuracy: 0.9398 - loss: 0.2444 - val_accuracy: 0.9875 - val_loss: 0.1060\nEpoch 15/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9503 - loss: 0.2103","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 557ms/step - accuracy: 0.9503 - loss: 0.2103 - val_accuracy: 0.9891 - val_loss: 0.0875\nEpoch 16/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9593 - loss: 0.1871","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m167s\u001b[0m 554ms/step - accuracy: 0.9593 - loss: 0.1871 - val_accuracy: 0.9942 - val_loss: 0.0715\nEpoch 17/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 115ms/step - accuracy: 0.9613 - loss: 0.1698","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 544ms/step - accuracy: 0.9613 - loss: 0.1699 - val_accuracy: 0.9971 - val_loss: 0.0597\nEpoch 18/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9672 - loss: 0.1594","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m167s\u001b[0m 557ms/step - accuracy: 0.9672 - loss: 0.1594 - val_accuracy: 0.9985 - val_loss: 0.0553\nEpoch 19/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9657 - loss: 0.1451","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 549ms/step - accuracy: 0.9657 - loss: 0.1451 - val_accuracy: 0.9956 - val_loss: 0.0464\nEpoch 20/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9640 - loss: 0.1441","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 543ms/step - accuracy: 0.9640 - loss: 0.1440 - val_accuracy: 0.9978 - val_loss: 0.0434\nEpoch 21/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9717 - loss: 0.1297","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 557ms/step - accuracy: 0.9717 - loss: 0.1297 - val_accuracy: 0.9978 - val_loss: 0.0344\nEpoch 22/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9742 - loss: 0.1185","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 547ms/step - accuracy: 0.9742 - loss: 0.1185 - val_accuracy: 0.9993 - val_loss: 0.0310\nEpoch 23/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9794 - loss: 0.0996","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 550ms/step - accuracy: 0.9794 - loss: 0.0996 - val_accuracy: 0.9993 - val_loss: 0.0258\nEpoch 24/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 542ms/step - accuracy: 0.9742 - loss: 0.0988 - val_accuracy: 0.9993 - val_loss: 0.0280\nEpoch 25/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9837 - loss: 0.0860","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m164s\u001b[0m 558ms/step - accuracy: 0.9837 - loss: 0.0860 - val_accuracy: 1.0000 - val_loss: 0.0205\nEpoch 26/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9827 - loss: 0.0789","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 551ms/step - accuracy: 0.9826 - loss: 0.0790 - val_accuracy: 1.0000 - val_loss: 0.0200\nEpoch 27/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9817 - loss: 0.0803","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 549ms/step - accuracy: 0.9817 - loss: 0.0803 - val_accuracy: 0.9985 - val_loss: 0.0181\nEpoch 28/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9806 - loss: 0.0833","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m165s\u001b[0m 546ms/step - accuracy: 0.9806 - loss: 0.0833 - val_accuracy: 1.0000 - val_loss: 0.0158\nEpoch 29/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 114ms/step - accuracy: 0.9849 - loss: 0.0729","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 544ms/step - accuracy: 0.9849 - loss: 0.0728 - val_accuracy: 1.0000 - val_loss: 0.0144\nEpoch 30/30\n","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 112ms/step - accuracy: 0.9858 - loss: 0.0686","output_type":"stream"},{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 544ms/step - accuracy: 0.9858 - loss: 0.0686 - val_accuracy: 1.0000 - val_loss: 0.0120\n","output_type":"stream"}]},{"cell_type":"code","source":"model.evaluate(test_ds)","metadata":{"papermill":{"duration":262.415156,"end_time":"2023-10-15T09:16:43.107507","exception":false,"start_time":"2023-10-15T09:12:20.692351","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:25:03.535157Z","iopub.execute_input":"2024-08-21T15:25:03.535462Z","iopub.status.idle":"2024-08-21T15:26:12.665433Z","shell.execute_reply.started":"2024-08-21T15:25:03.535437Z","shell.execute_reply":"2024-08-21T15:26:12.664551Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"Corrupt JPEG data: premature end of data segment\nCorrupt JPEG data: 445 extraneous bytes before marker 0xd9\nCorrupt JPEG data: premature end of data segment\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 69s/step - accuracy: 1.0000 - loss: 0.0130\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"[0.013027612119913101, 1.0]"},"metadata":{}}]},{"cell_type":"code","source":"# plot accuracy and loss\nimport matplotlib.pyplot as plt\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\n\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-21T15:26:12.666506Z","iopub.execute_input":"2024-08-21T15:26:12.666797Z","iopub.status.idle":"2024-08-21T15:26:12.934172Z","shell.execute_reply.started":"2024-08-21T15:26:12.666772Z","shell.execute_reply":"2024-08-21T15:26:12.933342Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"\nimg = load_img(\n    '/kaggle/input/indian-medicinal-leaves-dataset/Indian Medicinal Leaves Image Datasets/Medicinal Leaf dataset/Bamboo/1458.jpg', target_size=(299, 299)\n)\nimg_array = img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\n\n\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":1.464962,"end_time":"2023-10-15T09:16:44.765519","exception":false,"start_time":"2023-10-15T09:16:43.300557","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:34:15.375443Z","iopub.execute_input":"2024-08-21T15:34:15.375838Z","iopub.status.idle":"2024-08-21T15:34:19.892893Z","shell.execute_reply.started":"2024-08-21T15:34:15.375807Z","shell.execute_reply":"2024-08-21T15:34:19.891915Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4s/step\nThis image most likely belongs to Bamboo with a 73.10 percent confidence.\n","output_type":"stream"}]},{"cell_type":"code","source":"\nimg = tf.keras.preprocessing.image.load_img(\n    '/kaggle/input/indian-medicinal-leaves-dataset/Indian Medicinal Leaves Image Datasets/Medicinal Leaf dataset/Coriender/170.jpg', target_size=(299, 299)\n)\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":0.441265,"end_time":"2023-10-15T09:16:45.404536","exception":false,"start_time":"2023-10-15T09:16:44.963271","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:35:24.098090Z","iopub.execute_input":"2024-08-21T15:35:24.099182Z","iopub.status.idle":"2024-08-21T15:35:24.179804Z","shell.execute_reply.started":"2024-08-21T15:35:24.099146Z","shell.execute_reply":"2024-08-21T15:35:24.178914Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\nThis image most likely belongs to Coriender with a 73.09 percent confidence.\n","output_type":"stream"}]},{"cell_type":"code","source":"\nimg = tf.keras.preprocessing.image.load_img(\n    '/kaggle/input/indian-medicinal-leaves-dataset/Indian Medicinal Leaves Image Datasets/Medicinal Leaf dataset/Eucalyptus/618.jpg', target_size=(299, 299)\n)\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":0.522935,"end_time":"2023-10-15T09:16:46.316732","exception":false,"start_time":"2023-10-15T09:16:45.793797","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:35:53.557703Z","iopub.execute_input":"2024-08-21T15:35:53.558344Z","iopub.status.idle":"2024-08-21T15:35:53.638990Z","shell.execute_reply.started":"2024-08-21T15:35:53.558311Z","shell.execute_reply":"2024-08-21T15:35:53.638087Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\nThis image most likely belongs to Eucalyptus with a 73.11 percent confidence.\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\n\nimg = tf.keras.preprocessing.image.load_img(\n    '/kaggle/input/test-medicinal-leaves/bamboo.jpeg', target_size=(299, 299)\n)\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":0.271505,"end_time":"2023-10-15T09:16:46.902577","exception":false,"start_time":"2023-10-15T09:16:46.631072","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:26:13.655290Z","iopub.status.idle":"2024-08-21T15:26:13.655644Z","shell.execute_reply.started":"2024-08-21T15:26:13.655474Z","shell.execute_reply":"2024-08-21T15:26:13.655489Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\nimg = tf.keras.preprocessing.image.load_img(\n    '/kaggle/input/test-medicinal-leaves/doddapatre.jpg', target_size=(299, 299)\n)\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":0.408666,"end_time":"2023-10-15T09:16:47.516300","exception":false,"start_time":"2023-10-15T09:16:47.107634","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:26:13.656634Z","iopub.status.idle":"2024-08-21T15:26:13.657133Z","shell.execute_reply.started":"2024-08-21T15:26:13.656861Z","shell.execute_reply":"2024-08-21T15:26:13.656904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\nimg = tf.keras.preprocessing.image.load_img(\n    '/kaggle/input/test-medicinal-leaves/tulsi-leaves-t-cut-500x500.jpg.webp', target_size=(299, 299)\n)\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)  # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.sigmoid(predictions[0])\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(labels[np.argmax(score)], 100 * np.max(score))\n)","metadata":{"papermill":{"duration":0.280386,"end_time":"2023-10-15T09:16:48.053579","exception":false,"start_time":"2023-10-15T09:16:47.773193","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:26:13.659172Z","iopub.status.idle":"2024-08-21T15:26:13.659633Z","shell.execute_reply.started":"2024-08-21T15:26:13.659385Z","shell.execute_reply":"2024-08-21T15:26:13.659421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"papermill":{"duration":0.498969,"end_time":"2023-10-15T09:16:48.750936","exception":false,"start_time":"2023-10-15T09:16:48.251967","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.save('exe_plant.keras')","metadata":{"papermill":{"duration":0.598541,"end_time":"2023-10-15T09:16:49.546214","exception":false,"start_time":"2023-10-15T09:16:48.947673","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-21T15:32:08.785792Z","iopub.execute_input":"2024-08-21T15:32:08.786187Z","iopub.status.idle":"2024-08-21T15:32:09.445016Z","shell.execute_reply.started":"2024-08-21T15:32:08.786153Z","shell.execute_reply":"2024-08-21T15:32:09.444195Z"},"trusted":true},"execution_count":16,"outputs":[]}]}